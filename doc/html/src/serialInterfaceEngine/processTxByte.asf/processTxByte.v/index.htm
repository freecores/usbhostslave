<html>
<head>
<title>processTxByte.v</title>
<link rel="stylesheet" href="./../../../../css/hde.css">
<meta name="Author" content="Steve, Base2Designs">
<meta name="Generator" content="Active-HDL, Version 6.3.1444, Expiration Date: September 30, 2004\n\nCopyright © ALDEC, Inc. All rights reserved.">
</head>
<body>
<pre>
<span id=t_com>//////////////////////////////////////////////////////////////////////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// processTxByte</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// This file is part of the usbhostslave opencores effort.</span>
<span id=t_com>//// http://www.opencores.org/cores/????/                         ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// Module Description:                                          ////</span>
<span id=t_com>//// </span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// To Do:                                                       ////</span>
<span id=t_com>//// </span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// Author(s):                                                   ////</span>
<span id=t_com>//// - Steve Fielding, sfielding@base2designs.com                 ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//////////////////////////////////////////////////////////////////////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// Copyright (C) 2004 Steve Fielding and OPENCORES.ORG          ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// This source file may be used and distributed without         ////</span>
<span id=t_com>//// restriction provided that this copyright statement is not    ////</span>
<span id=t_com>//// removed from the file and that any derivative work contains  ////</span>
<span id=t_com>//// the original copyright notice and the associated disclaimer. ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// This source file is free software; you can redistribute it   ////</span>
<span id=t_com>//// and/or modify it under the terms of the GNU Lesser General   ////</span>
<span id=t_com>//// Public License as published by the Free Software Foundation; ////</span>
<span id=t_com>//// either version 2.1 of the License, or (at your option) any   ////</span>
<span id=t_com>//// later version.                                               ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// This source is distributed in the hope that it will be       ////</span>
<span id=t_com>//// useful, but WITHOUT ANY WARRANTY; without even the implied   ////</span>
<span id=t_com>//// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR      ////</span>
<span id=t_com>//// PURPOSE. See the GNU Lesser General Public License for more  ////</span>
<span id=t_com>//// details.                                                     ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// You should have received a copy of the GNU Lesser General    ////</span>
<span id=t_com>//// Public License along with this source; if not, download it   ////</span>
<span id=t_com>//// from http://www.opencores.org/lgpl.shtml                     ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//////////////////////////////////////////////////////////////////////</span>
<span id=t_com>//</span>
<span id=t_com>// $Id: index.htm,v 1.1.1.1 2004-10-11 03:59:39 sfielding Exp $</span>
<span id=t_com>//</span>
<span id=t_com>// CVS Revision History</span>
<span id=t_com>//</span>
<span id=t_com>// $Log: not supported by cvs2svn $</span>
<span id=t_com>//</span>


<span id=t_dir>`timescale</span> <span id=t_cns>1</span><span id=t_idt>ns</span> / <span id=t_cns>1</span><span id=t_idt>ps</span>
<span id=t_dir>`include</span> <span id=t_cns>"usbSerialInterfaceEngine_h.v"</span>
<span id=t_dir>`include</span> <span id=t_cns>"usbConstants_h.v"</span>

<span id=t_kwd>module</span> <span id=t_idt>processTxByte</span> (<span id=t_idt>JBit</span>, <span id=t_idt>KBit</span>, <span id=t_idt>TxByteCtrlIn</span>, <span id=t_idt>TxByteIn</span>, <span id=t_idt>USBWireCtrl</span>, <span id=t_idt>USBWireData</span>, <span id=t_idt>USBWireGnt</span>, <span id=t_idt>USBWireRdy</span>, <span id=t_idt>USBWireReq</span>, <span id=t_idt>USBWireWEn</span>, <span id=t_idt>clk</span>, <span id=t_idt>processTxByteRdy</span>, <span id=t_idt>processTxByteWEn</span>, <span id=t_idt>rst</span>);
<span id=t_kwd>input</span>   [<span id=t_cns>1</span>:<span id=t_cns>0</span>] <span id=t_idt>JBit</span>;
<span id=t_kwd>input</span>   [<span id=t_cns>1</span>:<span id=t_cns>0</span>] <span id=t_idt>KBit</span>;
<span id=t_kwd>input</span>   [<span id=t_cns>7</span>:<span id=t_cns>0</span>] <span id=t_idt>TxByteCtrlIn</span>;
<span id=t_kwd>input</span>   [<span id=t_cns>7</span>:<span id=t_cns>0</span>] <span id=t_idt>TxByteIn</span>;
<span id=t_kwd>input</span>   <span id=t_idt>USBWireGnt</span>;
<span id=t_kwd>input</span>   <span id=t_idt>USBWireRdy</span>;
<span id=t_kwd>input</span>   <span id=t_idt>clk</span>;
<span id=t_kwd>input</span>   <span id=t_idt>processTxByteWEn</span>;
<span id=t_kwd>input</span>   <span id=t_idt>rst</span>;
<span id=t_kwd>output</span>  <span id=t_idt>USBWireCtrl</span>;
<span id=t_kwd>output</span>  [<span id=t_cns>1</span>:<span id=t_cns>0</span>] <span id=t_idt>USBWireData</span>;
<span id=t_kwd>output</span>  <span id=t_idt>USBWireReq</span>;
<span id=t_kwd>output</span>  <span id=t_idt>USBWireWEn</span>;
<span id=t_kwd>output</span>  <span id=t_idt>processTxByteRdy</span>;

<span id=t_kwd>wire</span>    [<span id=t_cns>1</span>:<span id=t_cns>0</span>] <span id=t_idt>JBit</span>;
<span id=t_kwd>wire</span>    [<span id=t_cns>1</span>:<span id=t_cns>0</span>] <span id=t_idt>KBit</span>;
<span id=t_kwd>wire</span>    [<span id=t_cns>7</span>:<span id=t_cns>0</span>] <span id=t_idt>TxByteCtrlIn</span>;
<span id=t_kwd>wire</span>    [<span id=t_cns>7</span>:<span id=t_cns>0</span>] <span id=t_idt>TxByteIn</span>;
<span id=t_kwd>reg</span>     <span id=t_idt>USBWireCtrl</span>, <span id=t_idt>next_USBWireCtrl</span>;
<span id=t_kwd>reg</span>     [<span id=t_cns>1</span>:<span id=t_cns>0</span>] <span id=t_idt>USBWireData</span>, <span id=t_idt>next_USBWireData</span>;
<span id=t_kwd>wire</span>    <span id=t_idt>USBWireGnt</span>;
<span id=t_kwd>wire</span>    <span id=t_idt>USBWireRdy</span>;
<span id=t_kwd>reg</span>     <span id=t_idt>USBWireReq</span>, <span id=t_idt>next_USBWireReq</span>;
<span id=t_kwd>reg</span>     <span id=t_idt>USBWireWEn</span>, <span id=t_idt>next_USBWireWEn</span>;
<span id=t_kwd>wire</span>    <span id=t_idt>clk</span>;
<span id=t_kwd>reg</span>     <span id=t_idt>processTxByteRdy</span>, <span id=t_idt>next_processTxByteRdy</span>;
<span id=t_kwd>wire</span>    <span id=t_idt>processTxByteWEn</span>;
<span id=t_kwd>wire</span>    <span id=t_idt>rst</span>;

<span id=t_com>// diagram signals declarations</span>
<span id=t_kwd>reg</span>  [<span id=t_cns>1</span>:<span id=t_cns>0</span>]<span id=t_idt>TXLineState</span>, <span id=t_idt>next_TXLineState</span>;
<span id=t_kwd>reg</span>  [<span id=t_cns>3</span>:<span id=t_cns>0</span>]<span id=t_idt>TXOneCount</span>, <span id=t_idt>next_TXOneCount</span>;
<span id=t_kwd>reg</span>  [<span id=t_cns>7</span>:<span id=t_cns>0</span>]<span id=t_idt>TxByteCtrl</span>, <span id=t_idt>next_TxByteCtrl</span>;
<span id=t_kwd>reg</span>  [<span id=t_cns>7</span>:<span id=t_cns>0</span>]<span id=t_idt>TxByte</span>, <span id=t_idt>next_TxByte</span>;
<span id=t_kwd>reg</span>  [<span id=t_cns>3</span>:<span id=t_cns>0</span>]<span id=t_idt>i</span>, <span id=t_idt>next_i</span>;

<span id=t_com>// BINARY ENCODED state machine: prcTxB</span>
<span id=t_com>// State codes definitions:</span>
<span id=t_dir>`define</span> <span id=t_idt>START_PTBY</span> <span id=t_cns>4'b0000</span>
<span id=t_dir>`define</span> <span id=t_idt>PTBY_WAIT_EN</span> <span id=t_cns>4'b0001</span>
<span id=t_dir>`define</span> <span id=t_idt>SEND_BYTE_UPDATE_BYTE</span> <span id=t_cns>4'b0010</span>
<span id=t_dir>`define</span> <span id=t_idt>SEND_BYTE_WAIT_RDY</span> <span id=t_cns>4'b0011</span>
<span id=t_dir>`define</span> <span id=t_idt>SEND_BYTE_CHK</span> <span id=t_cns>4'b0100</span>
<span id=t_dir>`define</span> <span id=t_idt>SEND_BYTE_BIT_STUFF</span> <span id=t_cns>4'b0101</span>
<span id=t_dir>`define</span> <span id=t_idt>SEND_BYTE_WAIT_RDY2</span> <span id=t_cns>4'b0110</span>
<span id=t_dir>`define</span> <span id=t_idt>SEND_BYTE_CHK_FIN</span> <span id=t_cns>4'b0111</span>
<span id=t_dir>`define</span> <span id=t_idt>PTBY_WAIT_GNT</span> <span id=t_cns>4'b1000</span>
<span id=t_dir>`define</span> <span id=t_idt>STOP_SND_SE0_2</span> <span id=t_cns>4'b1001</span>
<span id=t_dir>`define</span> <span id=t_idt>STOP_SND_SE0_1</span> <span id=t_cns>4'b1010</span>
<span id=t_dir>`define</span> <span id=t_idt>STOP_CHK</span> <span id=t_cns>4'b1011</span>
<span id=t_dir>`define</span> <span id=t_idt>STOP_SND_J</span> <span id=t_cns>4'b1100</span>
<span id=t_dir>`define</span> <span id=t_idt>STOP_SND_IDLE</span> <span id=t_cns>4'b1101</span>
<span id=t_dir>`define</span> <span id=t_idt>STOP_FIN</span> <span id=t_cns>4'b1110</span>

<span id=t_kwd>reg</span> [<span id=t_cns>3</span>:<span id=t_cns>0</span>] <span id=t_idt>CurrState_prcTxB</span>;
<span id=t_kwd>reg</span> [<span id=t_cns>3</span>:<span id=t_cns>0</span>] <span id=t_idt>NextState_prcTxB</span>;


<span id=t_com>//--------------------------------------------------------------------</span>
<span id=t_com>// Machine: prcTxB</span>
<span id=t_com>//--------------------------------------------------------------------</span>
<span id=t_com>//----------------------------------</span>
<span id=t_com>// NextState logic (combinatorial)</span>
<span id=t_com>//----------------------------------</span>
<span id=t_kwd>always</span> @ (<span id=t_idt>TxByteIn</span> <span id=t_kwd>or</span> <span id=t_idt>TxByteCtrlIn</span> <span id=t_kwd>or</span> <span id=t_idt>JBit</span> <span id=t_kwd>or</span> <span id=t_idt>i</span> <span id=t_kwd>or</span> <span id=t_idt>TxByte</span> <span id=t_kwd>or</span> <span id=t_idt>TXOneCount</span> <span id=t_kwd>or</span> <span id=t_idt>TXLineState</span> <span id=t_kwd>or</span> <span id=t_idt>KBit</span> <span id=t_kwd>or</span> <span id=t_idt>processTxByteWEn</span> <span id=t_kwd>or</span> <span id=t_idt>USBWireGnt</span> <span id=t_kwd>or</span> <span id=t_idt>USBWireRdy</span> <span id=t_kwd>or</span> <span id=t_idt>TxByteCtrl</span> <span id=t_kwd>or</span> <span id=t_idt>processTxByteRdy</span> <span id=t_kwd>or</span> <span id=t_idt>USBWireData</span> <span id=t_kwd>or</span> <span id=t_idt>USBWireCtrl</span> <span id=t_kwd>or</span> <span id=t_idt>USBWireReq</span> <span id=t_kwd>or</span> <span id=t_idt>USBWireWEn</span> <span id=t_kwd>or</span> <span id=t_idt>CurrState_prcTxB</span>)
<span id=t_kwd>begin</span> : <span id=t_idt>prcTxB_NextState</span>
  <span id=t_idt>NextState_prcTxB</span> &lt;= <span id=t_idt>CurrState_prcTxB</span>;
  <span id=t_com>// Set default values for outputs and signals</span>
  <span id=t_idt>next_processTxByteRdy</span> &lt;= <span id=t_idt>processTxByteRdy</span>;
  <span id=t_idt>next_USBWireData</span> &lt;= <span id=t_idt>USBWireData</span>;
  <span id=t_idt>next_USBWireCtrl</span> &lt;= <span id=t_idt>USBWireCtrl</span>;
  <span id=t_idt>next_USBWireReq</span> &lt;= <span id=t_idt>USBWireReq</span>;
  <span id=t_idt>next_USBWireWEn</span> &lt;= <span id=t_idt>USBWireWEn</span>;
  <span id=t_idt>next_i</span> &lt;= <span id=t_idt>i</span>;
  <span id=t_idt>next_TxByte</span> &lt;= <span id=t_idt>TxByte</span>;
  <span id=t_idt>next_TxByteCtrl</span> &lt;= <span id=t_idt>TxByteCtrl</span>;
  <span id=t_idt>next_TXLineState</span> &lt;= <span id=t_idt>TXLineState</span>;
  <span id=t_idt>next_TXOneCount</span> &lt;= <span id=t_idt>TXOneCount</span>;
  <span id=t_kwd>case</span> (<span id=t_idt>CurrState_prcTxB</span>) <span id=t_com>// synopsys parallel_case full_case</span>
   `<span id=t_idt>START_PTBY</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_processTxByteRdy</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_idt>next_USBWireData</span> &lt;= <span id=t_cns>2'b00</span>;
     <span id=t_idt>next_USBWireCtrl</span> &lt;= `<span id=t_idt>TRI_STATE</span>;
     <span id=t_idt>next_USBWireReq</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_idt>next_USBWireWEn</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_idt>next_i</span> &lt;= <span id=t_cns>4'h0</span>;
     <span id=t_idt>next_TxByte</span> &lt;= <span id=t_cns>8'h00</span>;
     <span id=t_idt>next_TxByteCtrl</span> &lt;= <span id=t_cns>8'h00</span>;
     <span id=t_idt>next_TXLineState</span> &lt;= <span id=t_cns>2'b0</span>;
     <span id=t_idt>next_TXOneCount</span> &lt;= <span id=t_cns>4'h0</span>;
     <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>PTBY_WAIT_EN</span>;
   <span id=t_kwd>end</span>
   `<span id=t_idt>PTBY_WAIT_EN</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_processTxByteRdy</span> &lt;= <span id=t_cns>1'b1</span>;
     <span id=t_kwd>if</span> ((<span id=t_idt>processTxByteWEn</span> == <span id=t_cns>1'b1</span>) &amp;&amp; (<span id=t_idt>TxByteCtrlIn</span> == `<span id=t_idt>DATA_START</span>)) 
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>PTBY_WAIT_GNT</span>;
      <span id=t_idt>next_processTxByteRdy</span> &lt;= <span id=t_cns>1'b0</span>;
      <span id=t_idt>next_TxByte</span> &lt;= <span id=t_idt>TxByteIn</span>;
      <span id=t_idt>next_TxByteCtrl</span> &lt;= <span id=t_idt>TxByteCtrlIn</span>;
      <span id=t_idt>next_TXOneCount</span> &lt;= <span id=t_cns>1</span>;
      <span id=t_idt>next_TXLineState</span> &lt;= <span id=t_idt>JBit</span>;
      <span id=t_idt>next_USBWireReq</span> &lt;= <span id=t_cns>1'b1</span>;
     <span id=t_kwd>end</span>
     <span id=t_kwd>else</span> <span id=t_kwd>if</span> (<span id=t_idt>processTxByteWEn</span> == <span id=t_cns>1'b1</span>) 
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>SEND_BYTE_UPDATE_BYTE</span>;
      <span id=t_idt>next_processTxByteRdy</span> &lt;= <span id=t_cns>1'b0</span>;
      <span id=t_idt>next_TxByte</span> &lt;= <span id=t_idt>TxByteIn</span>;
      <span id=t_idt>next_TxByteCtrl</span> &lt;= <span id=t_idt>TxByteCtrlIn</span>;
      <span id=t_idt>next_i</span> &lt;= <span id=t_cns>4'h0</span>;
     <span id=t_kwd>end</span>
   <span id=t_kwd>end</span>
   `<span id=t_idt>PTBY_WAIT_GNT</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>USBWireGnt</span> == <span id=t_cns>1'b1</span>)  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>SEND_BYTE_UPDATE_BYTE</span>;
      <span id=t_idt>next_i</span> &lt;= <span id=t_cns>4'h0</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>SEND_BYTE_UPDATE_BYTE</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_i</span> &lt;= <span id=t_idt>i</span> + <span id=t_cns>1'b1</span>;
     <span id=t_idt>next_TxByte</span> &lt;= {<span id=t_cns>1'b0</span>, <span id=t_idt>TxByte</span>[<span id=t_cns>7</span>:<span id=t_cns>1</span>] };
     <span id=t_kwd>if</span> (<span id=t_idt>TxByte</span>[<span id=t_cns>0</span>] == <span id=t_cns>1'b1</span>)                      <span id=t_com>//If this bit is 1, then</span>
       <span id=t_idt>next_TXOneCount</span> &lt;= <span id=t_idt>TXOneCount</span> + <span id=t_cns>1'b1</span>;
         <span id=t_com>//increment 'TXOneCount'</span>
     <span id=t_kwd>else</span>                                        <span id=t_com>//else this is a zero bit</span>
     <span id=t_kwd>begin</span>
       <span id=t_idt>next_TXOneCount</span> &lt;= <span id=t_cns>4'h1</span>;
         <span id=t_com>//reset 'TXOneCount'</span>
       <span id=t_kwd>if</span> (<span id=t_idt>TXLineState</span> == <span id=t_idt>JBit</span>) <span id=t_idt>next_TXLineState</span> &lt;= <span id=t_idt>KBit</span>;
         <span id=t_com>//toggle the line state</span>
       <span id=t_kwd>else</span> <span id=t_idt>next_TXLineState</span> &lt;= <span id=t_idt>JBit</span>;
     <span id=t_kwd>end</span>
     <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>SEND_BYTE_WAIT_RDY</span>;
   <span id=t_kwd>end</span>
   `<span id=t_idt>SEND_BYTE_WAIT_RDY</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>USBWireRdy</span> == <span id=t_cns>1'b1</span>)  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>SEND_BYTE_CHK</span>;
      <span id=t_idt>next_USBWireWEn</span> &lt;= <span id=t_cns>1'b1</span>;
      <span id=t_idt>next_USBWireData</span> &lt;= <span id=t_idt>TXLineState</span>;
      <span id=t_idt>next_USBWireCtrl</span> &lt;= `<span id=t_idt>DRIVE</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>SEND_BYTE_CHK</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_USBWireWEn</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_kwd>if</span> (<span id=t_idt>TXOneCount</span> == <span id=t_cns>4'h6</span>)  
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>SEND_BYTE_BIT_STUFF</span>;
     <span id=t_kwd>else</span> <span id=t_kwd>if</span> (<span id=t_idt>i</span> != <span id=t_cns>4'h8</span>)  
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>SEND_BYTE_UPDATE_BYTE</span>;
     <span id=t_kwd>else</span>
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>STOP_CHK</span>;
   <span id=t_kwd>end</span>
   `<span id=t_idt>SEND_BYTE_BIT_STUFF</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_TXOneCount</span> &lt;= <span id=t_cns>4'h1</span>;
     <span id=t_com>//reset 'TXOneCount'</span>
     <span id=t_kwd>if</span> (<span id=t_idt>TXLineState</span> == <span id=t_idt>JBit</span>) <span id=t_idt>next_TXLineState</span> &lt;= <span id=t_idt>KBit</span>;
     <span id=t_com>//toggle the line state</span>
     <span id=t_kwd>else</span> <span id=t_idt>next_TXLineState</span> &lt;= <span id=t_idt>JBit</span>;
     <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>SEND_BYTE_WAIT_RDY2</span>;
   <span id=t_kwd>end</span>
   `<span id=t_idt>SEND_BYTE_WAIT_RDY2</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>USBWireRdy</span> == <span id=t_cns>1'b1</span>)  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>SEND_BYTE_CHK_FIN</span>;
      <span id=t_idt>next_USBWireWEn</span> &lt;= <span id=t_cns>1'b1</span>;
      <span id=t_idt>next_USBWireData</span> &lt;= <span id=t_idt>TXLineState</span>;
      <span id=t_idt>next_USBWireCtrl</span> &lt;= `<span id=t_idt>DRIVE</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>SEND_BYTE_CHK_FIN</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_USBWireWEn</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_kwd>if</span> (<span id=t_idt>i</span> == <span id=t_cns>4'h8</span>) 
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>STOP_CHK</span>;
     <span id=t_kwd>else</span>
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>SEND_BYTE_UPDATE_BYTE</span>;
   <span id=t_kwd>end</span>
   `<span id=t_idt>STOP_SND_SE0_2</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_USBWireWEn</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_kwd>if</span> (<span id=t_idt>USBWireRdy</span> == <span id=t_cns>1'b1</span>)  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>STOP_SND_J</span>;
      <span id=t_idt>next_USBWireWEn</span> &lt;= <span id=t_cns>1'b1</span>;
      <span id=t_idt>next_USBWireData</span> &lt;= `<span id=t_idt>SE0</span>;
      <span id=t_idt>next_USBWireCtrl</span> &lt;= `<span id=t_idt>DRIVE</span>;
     <span id=t_kwd>end</span>
   <span id=t_kwd>end</span>
   `<span id=t_idt>STOP_SND_SE0_1</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>USBWireRdy</span> == <span id=t_cns>1'b1</span>)  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>STOP_SND_SE0_2</span>;
      <span id=t_idt>next_USBWireWEn</span> &lt;= <span id=t_cns>1'b1</span>;
      <span id=t_idt>next_USBWireData</span> &lt;= `<span id=t_idt>SE0</span>;
      <span id=t_idt>next_USBWireCtrl</span> &lt;= `<span id=t_idt>DRIVE</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>STOP_CHK</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>TxByteCtrl</span> == `<span id=t_idt>DATA_STOP</span>)  
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>STOP_SND_SE0_1</span>;
     <span id=t_kwd>else</span>
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>PTBY_WAIT_EN</span>;
   `<span id=t_idt>STOP_SND_J</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_USBWireWEn</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_kwd>if</span> (<span id=t_idt>USBWireRdy</span> == <span id=t_cns>1'b1</span>)  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>STOP_SND_IDLE</span>;
      <span id=t_idt>next_USBWireWEn</span> &lt;= <span id=t_cns>1'b1</span>;
      <span id=t_idt>next_USBWireData</span> &lt;= <span id=t_idt>JBit</span>;
      <span id=t_idt>next_USBWireCtrl</span> &lt;= `<span id=t_idt>DRIVE</span>;
     <span id=t_kwd>end</span>
   <span id=t_kwd>end</span>
   `<span id=t_idt>STOP_SND_IDLE</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_USBWireWEn</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_kwd>if</span> (<span id=t_idt>USBWireRdy</span> == <span id=t_cns>1'b1</span>)  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>STOP_FIN</span>;
      <span id=t_idt>next_USBWireWEn</span> &lt;= <span id=t_cns>1'b1</span>;
      <span id=t_idt>next_USBWireData</span> &lt;= <span id=t_idt>JBit</span>;
      <span id=t_idt>next_USBWireCtrl</span> &lt;= `<span id=t_idt>TRI_STATE</span>;
     <span id=t_kwd>end</span>
   <span id=t_kwd>end</span>
   `<span id=t_idt>STOP_FIN</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_USBWireWEn</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_idt>next_USBWireReq</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_com>//release the wire</span>
     <span id=t_idt>NextState_prcTxB</span> &lt;= `<span id=t_idt>PTBY_WAIT_EN</span>;
   <span id=t_kwd>end</span>
  <span id=t_kwd>endcase</span>
<span id=t_kwd>end</span>

<span id=t_com>//----------------------------------</span>
<span id=t_com>// Current State Logic (sequential)</span>
<span id=t_com>//----------------------------------</span>
<span id=t_kwd>always</span> @ (<span id=t_kwd>posedge</span> <span id=t_idt>clk</span>)
<span id=t_kwd>begin</span> : <span id=t_idt>prcTxB_CurrentState</span>
  <span id=t_kwd>if</span> (<span id=t_idt>rst</span>) 
   <span id=t_idt>CurrState_prcTxB</span> &lt;= `<span id=t_idt>START_PTBY</span>;
  <span id=t_kwd>else</span>
   <span id=t_idt>CurrState_prcTxB</span> &lt;= <span id=t_idt>NextState_prcTxB</span>;
<span id=t_kwd>end</span>

<span id=t_com>//----------------------------------</span>
<span id=t_com>// Registered outputs logic</span>
<span id=t_com>//----------------------------------</span>
<span id=t_kwd>always</span> @ (<span id=t_kwd>posedge</span> <span id=t_idt>clk</span>)
<span id=t_kwd>begin</span> : <span id=t_idt>prcTxB_RegOutput</span>
  <span id=t_kwd>if</span> (<span id=t_idt>rst</span>) 
  <span id=t_kwd>begin</span>
   <span id=t_idt>i</span> &lt;= <span id=t_cns>4'h0</span>;
   <span id=t_idt>TxByte</span> &lt;= <span id=t_cns>8'h00</span>;
   <span id=t_idt>TxByteCtrl</span> &lt;= <span id=t_cns>8'h00</span>;
   <span id=t_idt>TXLineState</span> &lt;= <span id=t_cns>2'b0</span>;
   <span id=t_idt>TXOneCount</span> &lt;= <span id=t_cns>4'h0</span>;
   <span id=t_idt>processTxByteRdy</span> &lt;= <span id=t_cns>1'b0</span>;
   <span id=t_idt>USBWireData</span> &lt;= <span id=t_cns>2'b00</span>;
   <span id=t_idt>USBWireCtrl</span> &lt;= `<span id=t_idt>TRI_STATE</span>;
   <span id=t_idt>USBWireReq</span> &lt;= <span id=t_cns>1'b0</span>;
   <span id=t_idt>USBWireWEn</span> &lt;= <span id=t_cns>1'b0</span>;
  <span id=t_kwd>end</span>
  <span id=t_kwd>else</span> 
  <span id=t_kwd>begin</span>
   <span id=t_idt>i</span> &lt;= <span id=t_idt>next_i</span>;
   <span id=t_idt>TxByte</span> &lt;= <span id=t_idt>next_TxByte</span>;
   <span id=t_idt>TxByteCtrl</span> &lt;= <span id=t_idt>next_TxByteCtrl</span>;
   <span id=t_idt>TXLineState</span> &lt;= <span id=t_idt>next_TXLineState</span>;
   <span id=t_idt>TXOneCount</span> &lt;= <span id=t_idt>next_TXOneCount</span>;
   <span id=t_idt>processTxByteRdy</span> &lt;= <span id=t_idt>next_processTxByteRdy</span>;
   <span id=t_idt>USBWireData</span> &lt;= <span id=t_idt>next_USBWireData</span>;
   <span id=t_idt>USBWireCtrl</span> &lt;= <span id=t_idt>next_USBWireCtrl</span>;
   <span id=t_idt>USBWireReq</span> &lt;= <span id=t_idt>next_USBWireReq</span>;
   <span id=t_idt>USBWireWEn</span> &lt;= <span id=t_idt>next_USBWireWEn</span>;
  <span id=t_kwd>end</span>
<span id=t_kwd>end</span>

<span id=t_kwd>endmodule</span>
</pre>
</body>
</html>
