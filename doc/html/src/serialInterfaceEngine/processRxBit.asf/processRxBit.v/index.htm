<html>
<head>
<title>processRxBit.v</title>
<link rel="stylesheet" href="./../../../../css/hde.css">
<meta name="Author" content="Steve, Base2Designs">
<meta name="Generator" content="Active-HDL, Version 6.3.1444, Expiration Date: September 30, 2004\n\nCopyright © ALDEC, Inc. All rights reserved.">
</head>
<body>
<pre>
<span id=t_com>//////////////////////////////////////////////////////////////////////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// processRxBit</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// This file is part of the usbhostslave opencores effort.</span>
<span id=t_com>//// http://www.opencores.org/cores/????/                         ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// Module Description:                                          ////</span>
<span id=t_com>//// </span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// To Do:                                                       ////</span>
<span id=t_com>//// </span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// Author(s):                                                   ////</span>
<span id=t_com>//// - Steve Fielding, sfielding@base2designs.com                 ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//////////////////////////////////////////////////////////////////////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// Copyright (C) 2004 Steve Fielding and OPENCORES.ORG          ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// This source file may be used and distributed without         ////</span>
<span id=t_com>//// restriction provided that this copyright statement is not    ////</span>
<span id=t_com>//// removed from the file and that any derivative work contains  ////</span>
<span id=t_com>//// the original copyright notice and the associated disclaimer. ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// This source file is free software; you can redistribute it   ////</span>
<span id=t_com>//// and/or modify it under the terms of the GNU Lesser General   ////</span>
<span id=t_com>//// Public License as published by the Free Software Foundation; ////</span>
<span id=t_com>//// either version 2.1 of the License, or (at your option) any   ////</span>
<span id=t_com>//// later version.                                               ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// This source is distributed in the hope that it will be       ////</span>
<span id=t_com>//// useful, but WITHOUT ANY WARRANTY; without even the implied   ////</span>
<span id=t_com>//// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR      ////</span>
<span id=t_com>//// PURPOSE. See the GNU Lesser General Public License for more  ////</span>
<span id=t_com>//// details.                                                     ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// You should have received a copy of the GNU Lesser General    ////</span>
<span id=t_com>//// Public License along with this source; if not, download it   ////</span>
<span id=t_com>//// from http://www.opencores.org/lgpl.shtml                     ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//////////////////////////////////////////////////////////////////////</span>
<span id=t_com>//</span>
<span id=t_com>// $Id: index.htm,v 1.1.1.1 2004-10-11 03:59:23 sfielding Exp $</span>
<span id=t_com>//</span>
<span id=t_com>// CVS Revision History</span>
<span id=t_com>//</span>
<span id=t_com>// $Log: not supported by cvs2svn $</span>
<span id=t_com>//</span>


<span id=t_dir>`timescale</span> <span id=t_cns>1</span><span id=t_idt>ns</span> / <span id=t_cns>1</span><span id=t_idt>ps</span>
<span id=t_dir>`include</span> <span id=t_cns>"usbSerialInterfaceEngine_h.v"</span>


<span id=t_kwd>module</span> <span id=t_idt>processRxBit</span> (<span id=t_idt>JBit</span>, <span id=t_idt>KBit</span>, <span id=t_idt>RxBitsIn</span>, <span id=t_idt>RxCtrlOut</span>, <span id=t_idt>RxDataOut</span>, <span id=t_idt>clk</span>, <span id=t_idt>processRxBitRdy</span>, <span id=t_idt>processRxBitsWEn</span>, <span id=t_idt>processRxByteRdy</span>, <span id=t_idt>processRxByteWEn</span>, <span id=t_idt>resumeDetected</span>, <span id=t_idt>rst</span>);
<span id=t_kwd>input</span>   [<span id=t_cns>1</span>:<span id=t_cns>0</span>] <span id=t_idt>JBit</span>;
<span id=t_kwd>input</span>   [<span id=t_cns>1</span>:<span id=t_cns>0</span>] <span id=t_idt>KBit</span>;
<span id=t_kwd>input</span>   [<span id=t_cns>1</span>:<span id=t_cns>0</span>] <span id=t_idt>RxBitsIn</span>;
<span id=t_kwd>input</span>   <span id=t_idt>clk</span>;
<span id=t_kwd>input</span>   <span id=t_idt>processRxBitsWEn</span>;
<span id=t_kwd>input</span>   <span id=t_idt>processRxByteRdy</span>;
<span id=t_kwd>input</span>   <span id=t_idt>rst</span>;
<span id=t_kwd>output</span>  [<span id=t_cns>7</span>:<span id=t_cns>0</span>] <span id=t_idt>RxCtrlOut</span>;
<span id=t_kwd>output</span>  [<span id=t_cns>7</span>:<span id=t_cns>0</span>] <span id=t_idt>RxDataOut</span>;
<span id=t_kwd>output</span>  <span id=t_idt>processRxBitRdy</span>;
<span id=t_kwd>output</span>  <span id=t_idt>processRxByteWEn</span>;
<span id=t_kwd>output</span>  <span id=t_idt>resumeDetected</span>;

<span id=t_kwd>wire</span>    [<span id=t_cns>1</span>:<span id=t_cns>0</span>] <span id=t_idt>JBit</span>;
<span id=t_kwd>wire</span>    [<span id=t_cns>1</span>:<span id=t_cns>0</span>] <span id=t_idt>KBit</span>;
<span id=t_kwd>wire</span>    [<span id=t_cns>1</span>:<span id=t_cns>0</span>] <span id=t_idt>RxBitsIn</span>;
<span id=t_kwd>reg</span>     [<span id=t_cns>7</span>:<span id=t_cns>0</span>] <span id=t_idt>RxCtrlOut</span>, <span id=t_idt>next_RxCtrlOut</span>;
<span id=t_kwd>reg</span>     [<span id=t_cns>7</span>:<span id=t_cns>0</span>] <span id=t_idt>RxDataOut</span>, <span id=t_idt>next_RxDataOut</span>;
<span id=t_kwd>wire</span>    <span id=t_idt>clk</span>;
<span id=t_kwd>reg</span>     <span id=t_idt>processRxBitRdy</span>, <span id=t_idt>next_processRxBitRdy</span>;
<span id=t_kwd>wire</span>    <span id=t_idt>processRxBitsWEn</span>;
<span id=t_kwd>wire</span>    <span id=t_idt>processRxByteRdy</span>;
<span id=t_kwd>reg</span>     <span id=t_idt>processRxByteWEn</span>, <span id=t_idt>next_processRxByteWEn</span>;
<span id=t_kwd>reg</span>     <span id=t_idt>resumeDetected</span>, <span id=t_idt>next_resumeDetected</span>;
<span id=t_kwd>wire</span>    <span id=t_idt>rst</span>;

<span id=t_com>// diagram signals declarations</span>
<span id=t_kwd>reg</span>  [<span id=t_cns>3</span>:<span id=t_cns>0</span>]<span id=t_idt>RXBitCount</span>, <span id=t_idt>next_RXBitCount</span>;
<span id=t_kwd>reg</span>  [<span id=t_cns>1</span>:<span id=t_cns>0</span>]<span id=t_idt>RXBitStMachCurrState</span>, <span id=t_idt>next_RXBitStMachCurrState</span>;
<span id=t_kwd>reg</span>  [<span id=t_cns>7</span>:<span id=t_cns>0</span>]<span id=t_idt>RXByte</span>, <span id=t_idt>next_RXByte</span>;
<span id=t_kwd>reg</span>  [<span id=t_cns>3</span>:<span id=t_cns>0</span>]<span id=t_idt>RXSameBitCount</span>, <span id=t_idt>next_RXSameBitCount</span>;
<span id=t_kwd>reg</span>  [<span id=t_cns>1</span>:<span id=t_cns>0</span>]<span id=t_idt>RxBits</span>, <span id=t_idt>next_RxBits</span>;
<span id=t_kwd>reg</span>  <span id=t_idt>bitStuffError</span>, <span id=t_idt>next_bitStuffError</span>;
<span id=t_kwd>reg</span>  [<span id=t_cns>1</span>:<span id=t_cns>0</span>]<span id=t_idt>oldRXBits</span>, <span id=t_idt>next_oldRXBits</span>;
<span id=t_kwd>reg</span>  [<span id=t_cns>3</span>:<span id=t_cns>0</span>]<span id=t_idt>resumeWaitCnt</span>, <span id=t_idt>next_resumeWaitCnt</span>;

<span id=t_com>// BINARY ENCODED state machine: prRxBit</span>
<span id=t_com>// State codes definitions:</span>
<span id=t_dir>`define</span> <span id=t_idt>START</span> <span id=t_cns>4'b0000</span>
<span id=t_dir>`define</span> <span id=t_idt>IDLE_FIRST_BIT</span> <span id=t_cns>4'b0001</span>
<span id=t_dir>`define</span> <span id=t_idt>WAIT_BITS</span> <span id=t_cns>4'b0010</span>
<span id=t_dir>`define</span> <span id=t_idt>IDLE_CHK_KBIT</span> <span id=t_cns>4'b0011</span>
<span id=t_dir>`define</span> <span id=t_idt>DATA_RX_LAST_BIT</span> <span id=t_cns>4'b0100</span>
<span id=t_dir>`define</span> <span id=t_idt>DATA_RX_CHK_SE0</span> <span id=t_cns>4'b0101</span>
<span id=t_dir>`define</span> <span id=t_idt>DATA_RX_DATA_DESTUFF</span> <span id=t_cns>4'b0110</span>
<span id=t_dir>`define</span> <span id=t_idt>DATA_RX_BYTE_SEND2</span> <span id=t_cns>4'b0111</span>
<span id=t_dir>`define</span> <span id=t_idt>DATA_RX_BYTE_WAIT_RDY</span> <span id=t_cns>4'b1000</span>
<span id=t_dir>`define</span> <span id=t_idt>RES_RX_CHK</span> <span id=t_cns>4'b1001</span>
<span id=t_dir>`define</span> <span id=t_idt>DATA_RX_ERROR_CHK_RES</span> <span id=t_cns>4'b1010</span>
<span id=t_dir>`define</span> <span id=t_idt>RES_END_CHK1</span> <span id=t_cns>4'b1011</span>
<span id=t_dir>`define</span> <span id=t_idt>IDLE_WAIT_PRB_RDY</span> <span id=t_cns>4'b1100</span>
<span id=t_dir>`define</span> <span id=t_idt>DATA_RX_WAIT_PRB_RDY</span> <span id=t_cns>4'b1101</span>
<span id=t_dir>`define</span> <span id=t_idt>DATA_RX_ERROR_WAIT_RDY</span> <span id=t_cns>4'b1110</span>

<span id=t_kwd>reg</span> [<span id=t_cns>3</span>:<span id=t_cns>0</span>] <span id=t_idt>CurrState_prRxBit</span>;
<span id=t_kwd>reg</span> [<span id=t_cns>3</span>:<span id=t_cns>0</span>] <span id=t_idt>NextState_prRxBit</span>;


<span id=t_com>//--------------------------------------------------------------------</span>
<span id=t_com>// Machine: prRxBit</span>
<span id=t_com>//--------------------------------------------------------------------</span>
<span id=t_com>//----------------------------------</span>
<span id=t_com>// NextState logic (combinatorial)</span>
<span id=t_com>//----------------------------------</span>
<span id=t_kwd>always</span> @ (<span id=t_idt>RxBitsIn</span> <span id=t_kwd>or</span> <span id=t_idt>RxBits</span> <span id=t_kwd>or</span> <span id=t_idt>oldRXBits</span> <span id=t_kwd>or</span> <span id=t_idt>RXSameBitCount</span> <span id=t_kwd>or</span> <span id=t_idt>RXBitCount</span> <span id=t_kwd>or</span> <span id=t_idt>RXByte</span> <span id=t_kwd>or</span> <span id=t_idt>JBit</span> <span id=t_kwd>or</span> <span id=t_idt>KBit</span> <span id=t_kwd>or</span> <span id=t_idt>resumeWaitCnt</span> <span id=t_kwd>or</span> <span id=t_idt>processRxBitsWEn</span> <span id=t_kwd>or</span> <span id=t_idt>RXBitStMachCurrState</span> <span id=t_kwd>or</span> <span id=t_idt>processRxByteRdy</span> <span id=t_kwd>or</span> <span id=t_idt>bitStuffError</span> <span id=t_kwd>or</span> <span id=t_idt>processRxByteWEn</span> <span id=t_kwd>or</span> <span id=t_idt>RxCtrlOut</span> <span id=t_kwd>or</span> <span id=t_idt>RxDataOut</span> <span id=t_kwd>or</span> <span id=t_idt>resumeDetected</span> <span id=t_kwd>or</span> <span id=t_idt>processRxBitRdy</span> <span id=t_kwd>or</span> <span id=t_idt>CurrState_prRxBit</span>)
<span id=t_kwd>begin</span> : <span id=t_idt>prRxBit_NextState</span>
  <span id=t_idt>NextState_prRxBit</span> &lt;= <span id=t_idt>CurrState_prRxBit</span>;
  <span id=t_com>// Set default values for outputs and signals</span>
  <span id=t_idt>next_processRxByteWEn</span> &lt;= <span id=t_idt>processRxByteWEn</span>;
  <span id=t_idt>next_RxCtrlOut</span> &lt;= <span id=t_idt>RxCtrlOut</span>;
  <span id=t_idt>next_RxDataOut</span> &lt;= <span id=t_idt>RxDataOut</span>;
  <span id=t_idt>next_resumeDetected</span> &lt;= <span id=t_idt>resumeDetected</span>;
  <span id=t_idt>next_RXBitStMachCurrState</span> &lt;= <span id=t_idt>RXBitStMachCurrState</span>;
  <span id=t_idt>next_RxBits</span> &lt;= <span id=t_idt>RxBits</span>;
  <span id=t_idt>next_RXSameBitCount</span> &lt;= <span id=t_idt>RXSameBitCount</span>;
  <span id=t_idt>next_RXBitCount</span> &lt;= <span id=t_idt>RXBitCount</span>;
  <span id=t_idt>next_oldRXBits</span> &lt;= <span id=t_idt>oldRXBits</span>;
  <span id=t_idt>next_RXByte</span> &lt;= <span id=t_idt>RXByte</span>;
  <span id=t_idt>next_bitStuffError</span> &lt;= <span id=t_idt>bitStuffError</span>;
  <span id=t_idt>next_resumeWaitCnt</span> &lt;= <span id=t_idt>resumeWaitCnt</span>;
  <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_idt>processRxBitRdy</span>;
  <span id=t_kwd>case</span> (<span id=t_idt>CurrState_prRxBit</span>) <span id=t_com>// synopsys parallel_case full_case</span>
   `<span id=t_idt>START</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_processRxByteWEn</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_idt>next_RxCtrlOut</span> &lt;= <span id=t_cns>8'h00</span>;
     <span id=t_idt>next_RxDataOut</span> &lt;= <span id=t_cns>8'h00</span>;
     <span id=t_idt>next_resumeDetected</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_idt>next_RXBitStMachCurrState</span> &lt;= `<span id=t_idt>IDLE_BIT_ST</span>;
     <span id=t_idt>next_RxBits</span> &lt;= <span id=t_cns>2'b00</span>;
     <span id=t_idt>next_RXSameBitCount</span> &lt;= <span id=t_cns>4'h0</span>;
     <span id=t_idt>next_RXBitCount</span> &lt;= <span id=t_cns>4'h0</span>;
     <span id=t_idt>next_oldRXBits</span> &lt;= <span id=t_cns>2'b00</span>;
     <span id=t_idt>next_RXByte</span> &lt;= <span id=t_cns>8'h00</span>;
     <span id=t_idt>next_bitStuffError</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_idt>next_resumeWaitCnt</span> &lt;= <span id=t_cns>4'h0</span>;
     <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_cns>1'b1</span>;
     <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>WAIT_BITS</span>;
   <span id=t_kwd>end</span>
   `<span id=t_idt>WAIT_BITS</span>:
     <span id=t_kwd>if</span> ((<span id=t_idt>processRxBitsWEn</span> == <span id=t_cns>1'b1</span>) &amp;&amp; (<span id=t_idt>RXBitStMachCurrState</span> == `<span id=t_idt>WAIT_RESUME_ST</span>)) 
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>RES_RX_CHK</span>;
      <span id=t_idt>next_RxBits</span> &lt;= <span id=t_idt>RxBitsIn</span>;
      <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_kwd>end</span>
     <span id=t_kwd>else</span> <span id=t_kwd>if</span> ((<span id=t_idt>processRxBitsWEn</span> == <span id=t_cns>1'b1</span>) &amp;&amp; (<span id=t_idt>RXBitStMachCurrState</span> == `<span id=t_idt>DATA_RECEIVE_BIT_ST</span>)) 
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>DATA_RX_CHK_SE0</span>;
      <span id=t_idt>next_RxBits</span> &lt;= <span id=t_idt>RxBitsIn</span>;
      <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_kwd>end</span>
     <span id=t_kwd>else</span> <span id=t_kwd>if</span> ((<span id=t_idt>processRxBitsWEn</span> == <span id=t_cns>1'b1</span>) &amp;&amp; (<span id=t_idt>RXBitStMachCurrState</span> == `<span id=t_idt>IDLE_BIT_ST</span>)) 
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>IDLE_CHK_KBIT</span>;
      <span id=t_idt>next_RxBits</span> &lt;= <span id=t_idt>RxBitsIn</span>;
      <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_kwd>end</span>
     <span id=t_kwd>else</span> <span id=t_kwd>if</span> ((<span id=t_idt>processRxBitsWEn</span> == <span id=t_cns>1'b1</span>) &amp;&amp; (<span id=t_idt>RXBitStMachCurrState</span> == `<span id=t_idt>RESUME_END_WAIT_ST</span>))  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>RES_END_CHK1</span>;
      <span id=t_idt>next_RxBits</span> &lt;= <span id=t_idt>RxBitsIn</span>;
      <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>IDLE_FIRST_BIT</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_processRxByteWEn</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_idt>next_RXBitStMachCurrState</span> &lt;= `<span id=t_idt>DATA_RECEIVE_BIT_ST</span>;
     <span id=t_idt>next_RXSameBitCount</span> &lt;= <span id=t_cns>4'h1</span>;
     <span id=t_idt>next_RXBitCount</span> &lt;= <span id=t_cns>4'h1</span>;
     <span id=t_idt>next_oldRXBits</span> &lt;= <span id=t_idt>RxBits</span>;
     <span id=t_com>//zero is always the first RZ data bit of a new packet</span>
     <span id=t_idt>next_RXByte</span> &lt;= <span id=t_cns>8'h00</span>;
     <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>WAIT_BITS</span>;
     <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_cns>1'b1</span>;
   <span id=t_kwd>end</span>
   `<span id=t_idt>IDLE_CHK_KBIT</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>RxBits</span> == <span id=t_idt>KBit</span>)  
      <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>IDLE_WAIT_PRB_RDY</span>;
     <span id=t_kwd>else</span>
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>WAIT_BITS</span>;
      <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_cns>1'b1</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>IDLE_WAIT_PRB_RDY</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>processRxByteRdy</span> == <span id=t_cns>1'b1</span>)  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>IDLE_FIRST_BIT</span>;
      <span id=t_idt>next_RxDataOut</span> &lt;= <span id=t_cns>8'h00</span>;
      <span id=t_com>//redundant data</span>
      <span id=t_idt>next_RxCtrlOut</span> &lt;= `<span id=t_idt>DATA_START</span>;
      <span id=t_com>//start of packet</span>
      <span id=t_idt>next_processRxByteWEn</span> &lt;= <span id=t_cns>1'b1</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>DATA_RX_LAST_BIT</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_processRxByteWEn</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_idt>next_RXBitStMachCurrState</span> &lt;= `<span id=t_idt>IDLE_BIT_ST</span>;
     <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>WAIT_BITS</span>;
     <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_cns>1'b1</span>;
   <span id=t_kwd>end</span>
   `<span id=t_idt>DATA_RX_CHK_SE0</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_bitStuffError</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_kwd>if</span> (<span id=t_idt>RxBits</span> == `<span id=t_idt>SE0</span>)  
      <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>DATA_RX_WAIT_PRB_RDY</span>;
     <span id=t_kwd>else</span>
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>DATA_RX_DATA_DESTUFF</span>;
      <span id=t_kwd>if</span> (<span id=t_idt>RxBits</span> == <span id=t_idt>oldRXBits</span>)                 <span id=t_com>//if the current 'RxBits' are the same as the old 'RxBits', then</span>
      <span id=t_kwd>begin</span>
        <span id=t_idt>next_RXSameBitCount</span> &lt;= <span id=t_idt>RXSameBitCount</span> + <span id=t_cns>1'b1</span>;
          <span id=t_com>//inc 'RXSameBitCount'</span>
          <span id=t_kwd>if</span> (<span id=t_idt>RXSameBitCount</span> == `<span id=t_idt>MAX_CONSEC_SAME_BITS</span>) <span id=t_com>//if 'RXSameBitCount' == 7 there has been a bit stuff error</span>
          <span id=t_idt>next_bitStuffError</span> &lt;= <span id=t_cns>1'b1</span>;
              <span id=t_com>//flag 'bitStuffError'</span>
          <span id=t_kwd>else</span>                                          <span id=t_com>//else no bit stuffing error</span>
          <span id=t_kwd>begin</span>
          <span id=t_idt>next_RXBitCount</span> &lt;= <span id=t_idt>RXBitCount</span> + <span id=t_cns>1'b1</span>;
              <span id=t_kwd>if</span> (<span id=t_idt>RXBitCount</span> != <span id=t_cns>4'h7</span>) <span id=t_kwd>begin</span>
            <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_cns>1'b1</span>;
                  <span id=t_com>//early indication of ready</span>
         <span id=t_kwd>end</span>
          <span id=t_idt>next_RXByte</span> &lt;= { <span id=t_cns>1'b1</span>, <span id=t_idt>RXByte</span>[<span id=t_cns>7</span>:<span id=t_cns>1</span>]};
              <span id=t_com>//RZ bit = 1 (ie no change in 'RxBits')</span>
          <span id=t_kwd>end</span>
      <span id=t_kwd>end</span>
      <span id=t_kwd>else</span>                                            <span id=t_com>//else current 'RxBits' are different from old 'RxBits'</span>
      <span id=t_kwd>begin</span>
          <span id=t_kwd>if</span> (<span id=t_idt>RXSameBitCount</span> != `<span id=t_idt>MAX_CONSEC_SAME_BITS</span>)  <span id=t_com>//if this is not the RZ 0 bit after 6 consecutive RZ 1s, then</span>
          <span id=t_kwd>begin</span>
          <span id=t_idt>next_RXBitCount</span> &lt;= <span id=t_idt>RXBitCount</span> + <span id=t_cns>1'b1</span>;
              <span id=t_kwd>if</span> (<span id=t_idt>RXBitCount</span> != <span id=t_cns>4'h7</span>) <span id=t_kwd>begin</span>
            <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_cns>1'b1</span>;
                  <span id=t_com>//early indication of ready</span>
         <span id=t_kwd>end</span>
          <span id=t_idt>next_RXByte</span> &lt;= {<span id=t_cns>1'b0</span>, <span id=t_idt>RXByte</span>[<span id=t_cns>7</span>:<span id=t_cns>1</span>]};
              <span id=t_com>//RZ bit = 0 (ie current'RxBits' is different than old 'RxBits')</span>
          <span id=t_kwd>end</span>
        <span id=t_idt>next_RXSameBitCount</span> &lt;= <span id=t_cns>4'h1</span>;
          <span id=t_com>//reset 'RXSameBitCount'</span>
      <span id=t_kwd>end</span>
      <span id=t_idt>next_oldRXBits</span> &lt;= <span id=t_idt>RxBits</span>;
     <span id=t_kwd>end</span>
   <span id=t_kwd>end</span>
   `<span id=t_idt>DATA_RX_WAIT_PRB_RDY</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>processRxByteRdy</span> == <span id=t_cns>1'b1</span>)  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>DATA_RX_LAST_BIT</span>;
      <span id=t_idt>next_RxDataOut</span> &lt;= <span id=t_cns>8'h00</span>;
      <span id=t_com>//redundant data</span>
      <span id=t_idt>next_RxCtrlOut</span> &lt;= `<span id=t_idt>DATA_STOP</span>;
      <span id=t_com>//end of packet</span>
      <span id=t_idt>next_processRxByteWEn</span> &lt;= <span id=t_cns>1'b1</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>DATA_RX_DATA_DESTUFF</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>RXBitCount</span> == <span id=t_cns>4'h8</span> &amp; <span id=t_idt>bitStuffError</span> == <span id=t_cns>1'b0</span>)  
      <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>DATA_RX_BYTE_WAIT_RDY</span>;
     <span id=t_kwd>else</span> <span id=t_kwd>if</span> (<span id=t_idt>bitStuffError</span> == <span id=t_cns>1'b1</span>)  
      <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>DATA_RX_ERROR_WAIT_RDY</span>;
     <span id=t_kwd>else</span>
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>WAIT_BITS</span>;
      <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_cns>1'b1</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>DATA_RX_BYTE_SEND2</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_processRxByteWEn</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>WAIT_BITS</span>;
     <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_cns>1'b1</span>;
   <span id=t_kwd>end</span>
   `<span id=t_idt>DATA_RX_BYTE_WAIT_RDY</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>processRxByteRdy</span> == <span id=t_cns>1'b1</span>)  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>DATA_RX_BYTE_SEND2</span>;
      <span id=t_idt>next_RXBitCount</span> &lt;= <span id=t_cns>4'h0</span>;
      <span id=t_idt>next_RxDataOut</span> &lt;= <span id=t_idt>RXByte</span>;
      <span id=t_idt>next_RxCtrlOut</span> &lt;= `<span id=t_idt>DATA_STREAM</span>;
      <span id=t_idt>next_processRxByteWEn</span> &lt;= <span id=t_cns>1'b1</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>DATA_RX_ERROR_CHK_RES</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_processRxByteWEn</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_kwd>if</span> (<span id=t_idt>RxBits</span> == <span id=t_idt>JBit</span>)                           <span id=t_com>//if current bit is a JBit, then</span>
       <span id=t_idt>next_RXBitStMachCurrState</span> &lt;= `<span id=t_idt>IDLE_BIT_ST</span>;
         <span id=t_com>//next state is idle</span>
     <span id=t_kwd>else</span>                                          <span id=t_com>//else</span>
     <span id=t_kwd>begin</span>
       <span id=t_idt>next_RXBitStMachCurrState</span> &lt;= `<span id=t_idt>WAIT_RESUME_ST</span>;
         <span id=t_com>//check for resume</span>
       <span id=t_idt>next_resumeWaitCnt</span> &lt;= <span id=t_cns>0</span>;
     <span id=t_kwd>end</span>
     <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>WAIT_BITS</span>;
     <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_cns>1'b1</span>;
   <span id=t_kwd>end</span>
   `<span id=t_idt>DATA_RX_ERROR_WAIT_RDY</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>processRxByteRdy</span> == <span id=t_cns>1'b1</span>)  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>DATA_RX_ERROR_CHK_RES</span>;
      <span id=t_idt>next_RxDataOut</span> &lt;= <span id=t_cns>8'h00</span>;
      <span id=t_com>//redundant data</span>
      <span id=t_idt>next_RxCtrlOut</span> &lt;= `<span id=t_idt>DATA_BIT_STUFF_ERROR</span>;
      <span id=t_idt>next_processRxByteWEn</span> &lt;= <span id=t_cns>1'b1</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>RES_RX_CHK</span>:
   <span id=t_kwd>begin</span>
     <span id=t_kwd>if</span> (<span id=t_idt>RxBits</span> != <span id=t_idt>KBit</span>)  <span id=t_com>//can only be a resume if line remains in Kbit state</span>
       <span id=t_idt>next_RXBitStMachCurrState</span> &lt;= `<span id=t_idt>IDLE_BIT_ST</span>;
     <span id=t_kwd>else</span>
     <span id=t_kwd>begin</span>
       <span id=t_idt>next_resumeWaitCnt</span> &lt;= <span id=t_idt>resumeWaitCnt</span> + <span id=t_cns>1'b1</span>;
         <span id=t_com>//if we've waited long enough, then</span>
         <span id=t_kwd>if</span> (<span id=t_idt>resumeWaitCnt</span> == `<span id=t_idt>RESUME_WAIT_TIME_MINUS1</span>)
         <span id=t_kwd>begin</span>
         <span id=t_idt>next_RXBitStMachCurrState</span> &lt;= `<span id=t_idt>RESUME_END_WAIT_ST</span>;
         <span id=t_idt>next_resumeDetected</span> &lt;= <span id=t_cns>1'b1</span>;
             <span id=t_com>//report resume detected</span>
         <span id=t_kwd>end</span>
     <span id=t_kwd>end</span>
     <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>WAIT_BITS</span>;
     <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_cns>1'b1</span>;
   <span id=t_kwd>end</span>
   `<span id=t_idt>RES_END_CHK1</span>:
   <span id=t_kwd>begin</span>
     <span id=t_kwd>if</span> (<span id=t_idt>RxBits</span> != <span id=t_idt>KBit</span>)  <span id=t_com>//line must leave KBit state for the end of resume</span>
     <span id=t_kwd>begin</span>
       <span id=t_idt>next_RXBitStMachCurrState</span> &lt;= `<span id=t_idt>IDLE_BIT_ST</span>;
       <span id=t_idt>next_resumeDetected</span> &lt;= <span id=t_cns>1'b0</span>;
         <span id=t_com>//clear resume detected flag</span>
     <span id=t_kwd>end</span>
     <span id=t_idt>NextState_prRxBit</span> &lt;= `<span id=t_idt>WAIT_BITS</span>;
     <span id=t_idt>next_processRxBitRdy</span> &lt;= <span id=t_cns>1'b1</span>;
   <span id=t_kwd>end</span>
  <span id=t_kwd>endcase</span>
<span id=t_kwd>end</span>

<span id=t_com>//----------------------------------</span>
<span id=t_com>// Current State Logic (sequential)</span>
<span id=t_com>//----------------------------------</span>
<span id=t_kwd>always</span> @ (<span id=t_kwd>posedge</span> <span id=t_idt>clk</span>)
<span id=t_kwd>begin</span> : <span id=t_idt>prRxBit_CurrentState</span>
  <span id=t_kwd>if</span> (<span id=t_idt>rst</span>) 
   <span id=t_idt>CurrState_prRxBit</span> &lt;= `<span id=t_idt>START</span>;
  <span id=t_kwd>else</span>
   <span id=t_idt>CurrState_prRxBit</span> &lt;= <span id=t_idt>NextState_prRxBit</span>;
<span id=t_kwd>end</span>

<span id=t_com>//----------------------------------</span>
<span id=t_com>// Registered outputs logic</span>
<span id=t_com>//----------------------------------</span>
<span id=t_kwd>always</span> @ (<span id=t_kwd>posedge</span> <span id=t_idt>clk</span>)
<span id=t_kwd>begin</span> : <span id=t_idt>prRxBit_RegOutput</span>
  <span id=t_kwd>if</span> (<span id=t_idt>rst</span>) 
  <span id=t_kwd>begin</span>
   <span id=t_idt>RXBitStMachCurrState</span> &lt;= `<span id=t_idt>IDLE_BIT_ST</span>;
   <span id=t_idt>RxBits</span> &lt;= <span id=t_cns>2'b00</span>;
   <span id=t_idt>RXSameBitCount</span> &lt;= <span id=t_cns>4'h0</span>;
   <span id=t_idt>RXBitCount</span> &lt;= <span id=t_cns>4'h0</span>;
   <span id=t_idt>oldRXBits</span> &lt;= <span id=t_cns>2'b00</span>;
   <span id=t_idt>RXByte</span> &lt;= <span id=t_cns>8'h00</span>;
   <span id=t_idt>bitStuffError</span> &lt;= <span id=t_cns>1'b0</span>;
   <span id=t_idt>resumeWaitCnt</span> &lt;= <span id=t_cns>4'h0</span>;
   <span id=t_idt>processRxByteWEn</span> &lt;= <span id=t_cns>1'b0</span>;
   <span id=t_idt>RxCtrlOut</span> &lt;= <span id=t_cns>8'h00</span>;
   <span id=t_idt>RxDataOut</span> &lt;= <span id=t_cns>8'h00</span>;
   <span id=t_idt>resumeDetected</span> &lt;= <span id=t_cns>1'b0</span>;
   <span id=t_idt>processRxBitRdy</span> &lt;= <span id=t_cns>1'b1</span>;
  <span id=t_kwd>end</span>
  <span id=t_kwd>else</span> 
  <span id=t_kwd>begin</span>
   <span id=t_idt>RXBitStMachCurrState</span> &lt;= <span id=t_idt>next_RXBitStMachCurrState</span>;
   <span id=t_idt>RxBits</span> &lt;= <span id=t_idt>next_RxBits</span>;
   <span id=t_idt>RXSameBitCount</span> &lt;= <span id=t_idt>next_RXSameBitCount</span>;
   <span id=t_idt>RXBitCount</span> &lt;= <span id=t_idt>next_RXBitCount</span>;
   <span id=t_idt>oldRXBits</span> &lt;= <span id=t_idt>next_oldRXBits</span>;
   <span id=t_idt>RXByte</span> &lt;= <span id=t_idt>next_RXByte</span>;
   <span id=t_idt>bitStuffError</span> &lt;= <span id=t_idt>next_bitStuffError</span>;
   <span id=t_idt>resumeWaitCnt</span> &lt;= <span id=t_idt>next_resumeWaitCnt</span>;
   <span id=t_idt>processRxByteWEn</span> &lt;= <span id=t_idt>next_processRxByteWEn</span>;
   <span id=t_idt>RxCtrlOut</span> &lt;= <span id=t_idt>next_RxCtrlOut</span>;
   <span id=t_idt>RxDataOut</span> &lt;= <span id=t_idt>next_RxDataOut</span>;
   <span id=t_idt>resumeDetected</span> &lt;= <span id=t_idt>next_resumeDetected</span>;
   <span id=t_idt>processRxBitRdy</span> &lt;= <span id=t_idt>next_processRxBitRdy</span>;
  <span id=t_kwd>end</span>
<span id=t_kwd>end</span>

<span id=t_kwd>endmodule</span>
</pre>
</body>
</html>
