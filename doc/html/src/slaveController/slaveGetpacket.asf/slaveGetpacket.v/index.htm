<html>
<head>
<title>slaveGetpacket.v</title>
<link rel="stylesheet" href="./../../../../css/hde.css">
<meta name="Author" content="Steve, Base2Designs">
<meta name="Generator" content="Active-HDL, Version 6.3.1444, Expiration Date: September 30, 2004\n\nCopyright © ALDEC, Inc. All rights reserved.">
</head>
<body>
<pre>
<span id=t_com>//////////////////////////////////////////////////////////////////////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// slaveGetPacket</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// This file is part of the usbhostslave opencores effort.</span>
<span id=t_com>//// http://www.opencores.org/cores/????/                         ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// Module Description:                                          ////</span>
<span id=t_com>//// </span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// To Do:                                                       ////</span>
<span id=t_com>//// </span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// Author(s):                                                   ////</span>
<span id=t_com>//// - Steve Fielding, sfielding@base2designs.com                 ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//////////////////////////////////////////////////////////////////////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// Copyright (C) 2004 Steve Fielding and OPENCORES.ORG          ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// This source file may be used and distributed without         ////</span>
<span id=t_com>//// restriction provided that this copyright statement is not    ////</span>
<span id=t_com>//// removed from the file and that any derivative work contains  ////</span>
<span id=t_com>//// the original copyright notice and the associated disclaimer. ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// This source file is free software; you can redistribute it   ////</span>
<span id=t_com>//// and/or modify it under the terms of the GNU Lesser General   ////</span>
<span id=t_com>//// Public License as published by the Free Software Foundation; ////</span>
<span id=t_com>//// either version 2.1 of the License, or (at your option) any   ////</span>
<span id=t_com>//// later version.                                               ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// This source is distributed in the hope that it will be       ////</span>
<span id=t_com>//// useful, but WITHOUT ANY WARRANTY; without even the implied   ////</span>
<span id=t_com>//// warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR      ////</span>
<span id=t_com>//// PURPOSE. See the GNU Lesser General Public License for more  ////</span>
<span id=t_com>//// details.                                                     ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//// You should have received a copy of the GNU Lesser General    ////</span>
<span id=t_com>//// Public License along with this source; if not, download it   ////</span>
<span id=t_com>//// from http://www.opencores.org/lgpl.shtml                     ////</span>
<span id=t_com>////                                                              ////</span>
<span id=t_com>//////////////////////////////////////////////////////////////////////</span>
<span id=t_com>//</span>
<span id=t_com>// $Id: index.htm,v 1.1.1.1 2004-10-11 04:00:35 sfielding Exp $</span>
<span id=t_com>//</span>
<span id=t_com>// CVS Revision History</span>
<span id=t_com>//</span>
<span id=t_com>// $Log: not supported by cvs2svn $</span>
<span id=t_com>//</span>


<span id=t_dir>`include</span> <span id=t_cns>"usbSerialInterfaceEngine_h.v"</span>
<span id=t_dir>`include</span> <span id=t_cns>"usbConstants_h.v"</span>

<span id=t_kwd>module</span> <span id=t_idt>slaveGetPacket</span> (<span id=t_idt>ACKRxed</span>, <span id=t_idt>CRCError</span>, <span id=t_idt>RXDataIn</span>, <span id=t_idt>RXDataValid</span>, <span id=t_idt>RXFifoData</span>, <span id=t_idt>RXFifoFull</span>, <span id=t_idt>RXFifoWEn</span>, <span id=t_idt>RXOverflow</span>, <span id=t_idt>RXPacketRdy</span>, <span id=t_idt>RXStreamStatusIn</span>, <span id=t_idt>RXTimeOut</span>, <span id=t_idt>RxPID</span>, <span id=t_idt>SIERxTimeOut</span>, <span id=t_idt>bitStuffError</span>, <span id=t_idt>clk</span>, <span id=t_idt>dataSequence</span>, <span id=t_idt>getPacketEn</span>, <span id=t_idt>rst</span>);
<span id=t_kwd>input</span>   [<span id=t_cns>7</span>:<span id=t_cns>0</span>] <span id=t_idt>RXDataIn</span>;
<span id=t_kwd>input</span>   <span id=t_idt>RXDataValid</span>;
<span id=t_kwd>input</span>   <span id=t_idt>RXFifoFull</span>;
<span id=t_kwd>input</span>   [<span id=t_cns>7</span>:<span id=t_cns>0</span>] <span id=t_idt>RXStreamStatusIn</span>;
<span id=t_kwd>input</span>   <span id=t_idt>SIERxTimeOut</span>;   <span id=t_com>// Single cycle pulse</span>
<span id=t_kwd>input</span>   <span id=t_idt>clk</span>;
<span id=t_kwd>input</span>   <span id=t_idt>getPacketEn</span>;
<span id=t_kwd>input</span>   <span id=t_idt>rst</span>;
<span id=t_kwd>output</span>  <span id=t_idt>ACKRxed</span>;
<span id=t_kwd>output</span>  <span id=t_idt>CRCError</span>;
<span id=t_kwd>output</span>  [<span id=t_cns>7</span>:<span id=t_cns>0</span>] <span id=t_idt>RXFifoData</span>;
<span id=t_kwd>output</span>  <span id=t_idt>RXFifoWEn</span>;
<span id=t_kwd>output</span>  <span id=t_idt>RXOverflow</span>;
<span id=t_kwd>output</span>  <span id=t_idt>RXPacketRdy</span>;
<span id=t_kwd>output</span>  <span id=t_idt>RXTimeOut</span>;
<span id=t_kwd>output</span>  [<span id=t_cns>3</span>:<span id=t_cns>0</span>] <span id=t_idt>RxPID</span>;
<span id=t_kwd>output</span>  <span id=t_idt>bitStuffError</span>;
<span id=t_kwd>output</span>  <span id=t_idt>dataSequence</span>;

<span id=t_kwd>reg</span>     <span id=t_idt>ACKRxed</span>, <span id=t_idt>next_ACKRxed</span>;
<span id=t_kwd>reg</span>     <span id=t_idt>CRCError</span>, <span id=t_idt>next_CRCError</span>;
<span id=t_kwd>wire</span>    [<span id=t_cns>7</span>:<span id=t_cns>0</span>] <span id=t_idt>RXDataIn</span>;
<span id=t_kwd>wire</span>    <span id=t_idt>RXDataValid</span>;
<span id=t_kwd>reg</span>     [<span id=t_cns>7</span>:<span id=t_cns>0</span>] <span id=t_idt>RXFifoData</span>, <span id=t_idt>next_RXFifoData</span>;
<span id=t_kwd>wire</span>    <span id=t_idt>RXFifoFull</span>;
<span id=t_kwd>reg</span>     <span id=t_idt>RXFifoWEn</span>, <span id=t_idt>next_RXFifoWEn</span>;
<span id=t_kwd>reg</span>     <span id=t_idt>RXOverflow</span>, <span id=t_idt>next_RXOverflow</span>;
<span id=t_kwd>reg</span>     <span id=t_idt>RXPacketRdy</span>, <span id=t_idt>next_RXPacketRdy</span>;
<span id=t_kwd>wire</span>    [<span id=t_cns>7</span>:<span id=t_cns>0</span>] <span id=t_idt>RXStreamStatusIn</span>;
<span id=t_kwd>reg</span>     <span id=t_idt>RXTimeOut</span>, <span id=t_idt>next_RXTimeOut</span>;
<span id=t_kwd>reg</span>     [<span id=t_cns>3</span>:<span id=t_cns>0</span>] <span id=t_idt>RxPID</span>, <span id=t_idt>next_RxPID</span>;
<span id=t_kwd>wire</span>    <span id=t_idt>SIERxTimeOut</span>;
<span id=t_kwd>reg</span>     <span id=t_idt>bitStuffError</span>, <span id=t_idt>next_bitStuffError</span>;
<span id=t_kwd>wire</span>    <span id=t_idt>clk</span>;
<span id=t_kwd>reg</span>     <span id=t_idt>dataSequence</span>, <span id=t_idt>next_dataSequence</span>;
<span id=t_kwd>wire</span>    <span id=t_idt>getPacketEn</span>;
<span id=t_kwd>wire</span>    <span id=t_idt>rst</span>;

<span id=t_com>// diagram signals declarations</span>
<span id=t_kwd>reg</span>  [<span id=t_cns>7</span>:<span id=t_cns>0</span>]<span id=t_idt>RXByteOld</span>, <span id=t_idt>next_RXByteOld</span>;
<span id=t_kwd>reg</span>  [<span id=t_cns>7</span>:<span id=t_cns>0</span>]<span id=t_idt>RXByteOldest</span>, <span id=t_idt>next_RXByteOldest</span>;
<span id=t_kwd>reg</span>  [<span id=t_cns>7</span>:<span id=t_cns>0</span>]<span id=t_idt>RXByte</span>, <span id=t_idt>next_RXByte</span>;
<span id=t_kwd>reg</span>  [<span id=t_cns>7</span>:<span id=t_cns>0</span>]<span id=t_idt>RXStreamStatus</span>, <span id=t_idt>next_RXStreamStatus</span>;

<span id=t_com>// BINARY ENCODED state machine: slvGetPkt</span>
<span id=t_com>// State codes definitions:</span>
<span id=t_dir>`define</span> <span id=t_idt>PROC_PKT_CHK_PID</span> <span id=t_cns>5'b00000</span>
<span id=t_dir>`define</span> <span id=t_idt>PROC_PKT_HS</span> <span id=t_cns>5'b00001</span>
<span id=t_dir>`define</span> <span id=t_idt>PROC_PKT_DATA_W_D1</span> <span id=t_cns>5'b00010</span>
<span id=t_dir>`define</span> <span id=t_idt>PROC_PKT_DATA_CHK_D1</span> <span id=t_cns>5'b00011</span>
<span id=t_dir>`define</span> <span id=t_idt>PROC_PKT_DATA_W_D2</span> <span id=t_cns>5'b00100</span>
<span id=t_dir>`define</span> <span id=t_idt>PROC_PKT_DATA_FIN</span> <span id=t_cns>5'b00101</span>
<span id=t_dir>`define</span> <span id=t_idt>PROC_PKT_DATA_CHK_D2</span> <span id=t_cns>5'b00110</span>
<span id=t_dir>`define</span> <span id=t_idt>PROC_PKT_DATA_W_D3</span> <span id=t_cns>5'b00111</span>
<span id=t_dir>`define</span> <span id=t_idt>PROC_PKT_DATA_CHK_D3</span> <span id=t_cns>5'b01000</span>
<span id=t_dir>`define</span> <span id=t_idt>PROC_PKT_DATA_LOOP_CHK_FIFO</span> <span id=t_cns>5'b01001</span>
<span id=t_dir>`define</span> <span id=t_idt>PROC_PKT_DATA_LOOP_FIFO_FULL</span> <span id=t_cns>5'b01010</span>
<span id=t_dir>`define</span> <span id=t_idt>PROC_PKT_DATA_LOOP_W_D</span> <span id=t_cns>5'b01011</span>
<span id=t_dir>`define</span> <span id=t_idt>START_GP</span> <span id=t_cns>5'b01100</span>
<span id=t_dir>`define</span> <span id=t_idt>WAIT_PKT</span> <span id=t_cns>5'b01101</span>
<span id=t_dir>`define</span> <span id=t_idt>CHK_PKT_START</span> <span id=t_cns>5'b01110</span>
<span id=t_dir>`define</span> <span id=t_idt>WAIT_EN</span> <span id=t_cns>5'b01111</span>
<span id=t_dir>`define</span> <span id=t_idt>PKT_RDY</span> <span id=t_cns>5'b10000</span>
<span id=t_dir>`define</span> <span id=t_idt>PROC_PKT_DATA_LOOP_DELAY</span> <span id=t_cns>5'b10001</span>

<span id=t_kwd>reg</span> [<span id=t_cns>4</span>:<span id=t_cns>0</span>] <span id=t_idt>CurrState_slvGetPkt</span>;
<span id=t_kwd>reg</span> [<span id=t_cns>4</span>:<span id=t_cns>0</span>] <span id=t_idt>NextState_slvGetPkt</span>;


<span id=t_com>//--------------------------------------------------------------------</span>
<span id=t_com>// Machine: slvGetPkt</span>
<span id=t_com>//--------------------------------------------------------------------</span>
<span id=t_com>//----------------------------------</span>
<span id=t_com>// NextState logic (combinatorial)</span>
<span id=t_com>//----------------------------------</span>
<span id=t_kwd>always</span> @ (<span id=t_idt>RXDataIn</span> <span id=t_kwd>or</span> <span id=t_idt>RXStreamStatusIn</span> <span id=t_kwd>or</span> <span id=t_idt>RXByte</span> <span id=t_kwd>or</span> <span id=t_idt>RXByteOldest</span> <span id=t_kwd>or</span> <span id=t_idt>RXByteOld</span> <span id=t_kwd>or</span> <span id=t_idt>RXDataValid</span> <span id=t_kwd>or</span> <span id=t_idt>RXStreamStatus</span> <span id=t_kwd>or</span> <span id=t_idt>getPacketEn</span> <span id=t_kwd>or</span> <span id=t_idt>RXFifoFull</span> <span id=t_kwd>or</span> <span id=t_idt>CRCError</span> <span id=t_kwd>or</span> <span id=t_idt>bitStuffError</span> <span id=t_kwd>or</span> <span id=t_idt>RXOverflow</span> <span id=t_kwd>or</span> <span id=t_idt>RXTimeOut</span> <span id=t_kwd>or</span> <span id=t_idt>ACKRxed</span> <span id=t_kwd>or</span> <span id=t_idt>dataSequence</span> <span id=t_kwd>or</span> <span id=t_idt>RxPID</span> <span id=t_kwd>or</span> <span id=t_idt>RXPacketRdy</span> <span id=t_kwd>or</span> <span id=t_idt>RXFifoWEn</span> <span id=t_kwd>or</span> <span id=t_idt>RXFifoData</span> <span id=t_kwd>or</span> <span id=t_idt>CurrState_slvGetPkt</span>)
<span id=t_kwd>begin</span> : <span id=t_idt>slvGetPkt_NextState</span>
  <span id=t_idt>NextState_slvGetPkt</span> &lt;= <span id=t_idt>CurrState_slvGetPkt</span>;
  <span id=t_com>// Set default values for outputs and signals</span>
  <span id=t_idt>next_CRCError</span> &lt;= <span id=t_idt>CRCError</span>;
  <span id=t_idt>next_bitStuffError</span> &lt;= <span id=t_idt>bitStuffError</span>;
  <span id=t_idt>next_RXOverflow</span> &lt;= <span id=t_idt>RXOverflow</span>;
  <span id=t_idt>next_RXTimeOut</span> &lt;= <span id=t_idt>RXTimeOut</span>;
  <span id=t_idt>next_ACKRxed</span> &lt;= <span id=t_idt>ACKRxed</span>;
  <span id=t_idt>next_dataSequence</span> &lt;= <span id=t_idt>dataSequence</span>;
  <span id=t_idt>next_RXByte</span> &lt;= <span id=t_idt>RXByte</span>;
  <span id=t_idt>next_RXStreamStatus</span> &lt;= <span id=t_idt>RXStreamStatus</span>;
  <span id=t_idt>next_RxPID</span> &lt;= <span id=t_idt>RxPID</span>;
  <span id=t_idt>next_RXPacketRdy</span> &lt;= <span id=t_idt>RXPacketRdy</span>;
  <span id=t_idt>next_RXByteOldest</span> &lt;= <span id=t_idt>RXByteOldest</span>;
  <span id=t_idt>next_RXByteOld</span> &lt;= <span id=t_idt>RXByteOld</span>;
  <span id=t_idt>next_RXFifoWEn</span> &lt;= <span id=t_idt>RXFifoWEn</span>;
  <span id=t_idt>next_RXFifoData</span> &lt;= <span id=t_idt>RXFifoData</span>;
  <span id=t_kwd>case</span> (<span id=t_idt>CurrState_slvGetPkt</span>) <span id=t_com>// synopsys parallel_case full_case</span>
   `<span id=t_idt>START_GP</span>:
     <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>WAIT_EN</span>;
   `<span id=t_idt>WAIT_PKT</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_CRCError</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_idt>next_bitStuffError</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_idt>next_RXOverflow</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_idt>next_RXTimeOut</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_idt>next_ACKRxed</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_idt>next_dataSequence</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_kwd>if</span> (<span id=t_idt>RXDataValid</span> == <span id=t_cns>1'b1</span>) 
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>CHK_PKT_START</span>;
      <span id=t_idt>next_RXByte</span> &lt;= <span id=t_idt>RXDataIn</span>;
      <span id=t_idt>next_RXStreamStatus</span> &lt;= <span id=t_idt>RXStreamStatusIn</span>;
     <span id=t_kwd>end</span>
   <span id=t_kwd>end</span>
   `<span id=t_idt>CHK_PKT_START</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>RXStreamStatus</span> == `<span id=t_idt>RX_PACKET_START</span>)  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_CHK_PID</span>;
      <span id=t_idt>next_RxPID</span> &lt;= <span id=t_idt>RXByte</span>[<span id=t_cns>3</span>:<span id=t_cns>0</span>];
     <span id=t_kwd>end</span>
     <span id=t_kwd>else</span>
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PKT_RDY</span>;
      <span id=t_idt>next_RXTimeOut</span> &lt;= <span id=t_cns>1'b1</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>WAIT_EN</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_RXPacketRdy</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_kwd>if</span> (<span id=t_idt>getPacketEn</span> == <span id=t_cns>1'b1</span>) 
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>WAIT_PKT</span>;
   <span id=t_kwd>end</span>
   `<span id=t_idt>PKT_RDY</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_RXPacketRdy</span> &lt;= <span id=t_cns>1'b1</span>;
     <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>WAIT_EN</span>;
   <span id=t_kwd>end</span>
   `<span id=t_idt>PROC_PKT_CHK_PID</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>RXByte</span>[<span id=t_cns>1</span>:<span id=t_cns>0</span>] == `<span id=t_idt>HANDSHAKE</span>) 
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_HS</span>;
     <span id=t_kwd>else</span> <span id=t_kwd>if</span> (<span id=t_idt>RXByte</span>[<span id=t_cns>1</span>:<span id=t_cns>0</span>] == `<span id=t_idt>DATA</span>) 
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_W_D1</span>;
     <span id=t_kwd>else</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PKT_RDY</span>;
   `<span id=t_idt>PROC_PKT_HS</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>RXDataValid</span> == <span id=t_cns>1'b1</span>) 
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PKT_RDY</span>;
      <span id=t_idt>next_RXOverflow</span> &lt;= <span id=t_idt>RXDataIn</span>[`<span id=t_idt>RX_OVERFLOW_BIT</span>];
      <span id=t_idt>next_ACKRxed</span> &lt;= <span id=t_idt>RXDataIn</span>[`<span id=t_idt>ACK_RXED_BIT</span>];
     <span id=t_kwd>end</span>
   `<span id=t_idt>PROC_PKT_DATA_W_D1</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>RXDataValid</span> == <span id=t_cns>1'b1</span>) 
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_CHK_D1</span>;
      <span id=t_idt>next_RXByte</span> &lt;= <span id=t_idt>RXDataIn</span>;
      <span id=t_idt>next_RXStreamStatus</span> &lt;= <span id=t_idt>RXStreamStatusIn</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>PROC_PKT_DATA_CHK_D1</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>RXStreamStatus</span> == `<span id=t_idt>RX_PACKET_STREAM</span>) 
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_W_D2</span>;
      <span id=t_idt>next_RXByteOldest</span> &lt;= <span id=t_idt>RXByte</span>;
     <span id=t_kwd>end</span>
     <span id=t_kwd>else</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_FIN</span>;
   `<span id=t_idt>PROC_PKT_DATA_W_D2</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>RXDataValid</span> == <span id=t_cns>1'b1</span>) 
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_CHK_D2</span>;
      <span id=t_idt>next_RXByte</span> &lt;= <span id=t_idt>RXDataIn</span>;
      <span id=t_idt>next_RXStreamStatus</span> &lt;= <span id=t_idt>RXStreamStatusIn</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>PROC_PKT_DATA_FIN</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_CRCError</span> &lt;= <span id=t_idt>RXByte</span>[`<span id=t_idt>CRC_ERROR_BIT</span>];
     <span id=t_idt>next_bitStuffError</span> &lt;= <span id=t_idt>RXByte</span>[`<span id=t_idt>BIT_STUFF_ERROR_BIT</span>];
     <span id=t_idt>next_dataSequence</span> &lt;= <span id=t_idt>RXByte</span>[`<span id=t_idt>DATA_SEQUENCE_BIT</span>];
     <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PKT_RDY</span>;
   <span id=t_kwd>end</span>
   `<span id=t_idt>PROC_PKT_DATA_CHK_D2</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>RXStreamStatus</span> == `<span id=t_idt>RX_PACKET_STREAM</span>) 
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_W_D3</span>;
      <span id=t_idt>next_RXByteOld</span> &lt;= <span id=t_idt>RXByte</span>;
     <span id=t_kwd>end</span>
     <span id=t_kwd>else</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_FIN</span>;
   `<span id=t_idt>PROC_PKT_DATA_W_D3</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>RXDataValid</span> == <span id=t_cns>1'b1</span>) 
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_CHK_D3</span>;
      <span id=t_idt>next_RXByte</span> &lt;= <span id=t_idt>RXDataIn</span>;
      <span id=t_idt>next_RXStreamStatus</span> &lt;= <span id=t_idt>RXStreamStatusIn</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>PROC_PKT_DATA_CHK_D3</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>RXStreamStatus</span> == `<span id=t_idt>RX_PACKET_STREAM</span>) 
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_LOOP_CHK_FIFO</span>;
     <span id=t_kwd>else</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_FIN</span>;
   `<span id=t_idt>PROC_PKT_DATA_LOOP_CHK_FIFO</span>:
     <span id=t_kwd>if</span> (<span id=t_idt>RXFifoFull</span> == <span id=t_cns>1'b1</span>)  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_LOOP_FIFO_FULL</span>;
      <span id=t_idt>next_RXOverflow</span> &lt;= <span id=t_cns>1'b1</span>;
     <span id=t_kwd>end</span>
     <span id=t_kwd>else</span>
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_LOOP_W_D</span>;
      <span id=t_idt>next_RXFifoWEn</span> &lt;= <span id=t_cns>1'b1</span>;
      <span id=t_idt>next_RXFifoData</span> &lt;= <span id=t_idt>RXByteOldest</span>;
      <span id=t_idt>next_RXByteOldest</span> &lt;= <span id=t_idt>RXByteOld</span>;
      <span id=t_idt>next_RXByteOld</span> &lt;= <span id=t_idt>RXByte</span>;
     <span id=t_kwd>end</span>
   `<span id=t_idt>PROC_PKT_DATA_LOOP_FIFO_FULL</span>:
     <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_LOOP_W_D</span>;
   `<span id=t_idt>PROC_PKT_DATA_LOOP_W_D</span>:
   <span id=t_kwd>begin</span>
     <span id=t_idt>next_RXFifoWEn</span> &lt;= <span id=t_cns>1'b0</span>;
     <span id=t_kwd>if</span> ((<span id=t_idt>RXDataValid</span> == <span id=t_cns>1'b1</span>) &amp;&amp; (<span id=t_idt>RXStreamStatusIn</span> == `<span id=t_idt>RX_PACKET_STREAM</span>))  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_LOOP_DELAY</span>;
      <span id=t_idt>next_RXByte</span> &lt;= <span id=t_idt>RXDataIn</span>;
     <span id=t_kwd>end</span>
     <span id=t_kwd>else</span> <span id=t_kwd>if</span> (<span id=t_idt>RXDataValid</span> == <span id=t_cns>1'b1</span>)  
     <span id=t_kwd>begin</span>
      <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_FIN</span>;
      <span id=t_idt>next_RXByte</span> &lt;= <span id=t_idt>RXDataIn</span>;
     <span id=t_kwd>end</span>
   <span id=t_kwd>end</span>
   `<span id=t_idt>PROC_PKT_DATA_LOOP_DELAY</span>:
     <span id=t_idt>NextState_slvGetPkt</span> &lt;= `<span id=t_idt>PROC_PKT_DATA_LOOP_CHK_FIFO</span>;
  <span id=t_kwd>endcase</span>
<span id=t_kwd>end</span>

<span id=t_com>//----------------------------------</span>
<span id=t_com>// Current State Logic (sequential)</span>
<span id=t_com>//----------------------------------</span>
<span id=t_kwd>always</span> @ (<span id=t_kwd>posedge</span> <span id=t_idt>clk</span>)
<span id=t_kwd>begin</span> : <span id=t_idt>slvGetPkt_CurrentState</span>
  <span id=t_kwd>if</span> (<span id=t_idt>rst</span>) 
   <span id=t_idt>CurrState_slvGetPkt</span> &lt;= `<span id=t_idt>START_GP</span>;
  <span id=t_kwd>else</span>
   <span id=t_idt>CurrState_slvGetPkt</span> &lt;= <span id=t_idt>NextState_slvGetPkt</span>;
<span id=t_kwd>end</span>

<span id=t_com>//----------------------------------</span>
<span id=t_com>// Registered outputs logic</span>
<span id=t_com>//----------------------------------</span>
<span id=t_kwd>always</span> @ (<span id=t_kwd>posedge</span> <span id=t_idt>clk</span>)
<span id=t_kwd>begin</span> : <span id=t_idt>slvGetPkt_RegOutput</span>
  <span id=t_kwd>if</span> (<span id=t_idt>rst</span>) 
  <span id=t_kwd>begin</span>
   <span id=t_idt>RXByteOld</span> &lt;= <span id=t_cns>8'h00</span>;
   <span id=t_idt>RXByteOldest</span> &lt;= <span id=t_cns>8'h00</span>;
   <span id=t_idt>RXByte</span> &lt;= <span id=t_cns>8'h00</span>;
   <span id=t_idt>RXStreamStatus</span> &lt;= <span id=t_cns>8'h00</span>;
   <span id=t_idt>RXPacketRdy</span> &lt;= <span id=t_cns>1'b0</span>;
   <span id=t_idt>RXFifoWEn</span> &lt;= <span id=t_cns>1'b0</span>;
   <span id=t_idt>RXFifoData</span> &lt;= <span id=t_cns>8'h00</span>;
   <span id=t_idt>CRCError</span> &lt;= <span id=t_cns>1'b0</span>;
   <span id=t_idt>bitStuffError</span> &lt;= <span id=t_cns>1'b0</span>;
   <span id=t_idt>RXOverflow</span> &lt;= <span id=t_cns>1'b0</span>;
   <span id=t_idt>RXTimeOut</span> &lt;= <span id=t_cns>1'b0</span>;
   <span id=t_idt>ACKRxed</span> &lt;= <span id=t_cns>1'b0</span>;
   <span id=t_idt>dataSequence</span> &lt;= <span id=t_cns>1'b0</span>;
   <span id=t_idt>RxPID</span> &lt;= <span id=t_cns>4'h0</span>;
  <span id=t_kwd>end</span>
  <span id=t_kwd>else</span> 
  <span id=t_kwd>begin</span>
   <span id=t_idt>RXByteOld</span> &lt;= <span id=t_idt>next_RXByteOld</span>;
   <span id=t_idt>RXByteOldest</span> &lt;= <span id=t_idt>next_RXByteOldest</span>;
   <span id=t_idt>RXByte</span> &lt;= <span id=t_idt>next_RXByte</span>;
   <span id=t_idt>RXStreamStatus</span> &lt;= <span id=t_idt>next_RXStreamStatus</span>;
   <span id=t_idt>RXPacketRdy</span> &lt;= <span id=t_idt>next_RXPacketRdy</span>;
   <span id=t_idt>RXFifoWEn</span> &lt;= <span id=t_idt>next_RXFifoWEn</span>;
   <span id=t_idt>RXFifoData</span> &lt;= <span id=t_idt>next_RXFifoData</span>;
   <span id=t_idt>CRCError</span> &lt;= <span id=t_idt>next_CRCError</span>;
   <span id=t_idt>bitStuffError</span> &lt;= <span id=t_idt>next_bitStuffError</span>;
   <span id=t_idt>RXOverflow</span> &lt;= <span id=t_idt>next_RXOverflow</span>;
   <span id=t_idt>RXTimeOut</span> &lt;= <span id=t_idt>next_RXTimeOut</span>;
   <span id=t_idt>ACKRxed</span> &lt;= <span id=t_idt>next_ACKRxed</span>;
   <span id=t_idt>dataSequence</span> &lt;= <span id=t_idt>next_dataSequence</span>;
   <span id=t_idt>RxPID</span> &lt;= <span id=t_idt>next_RxPID</span>;
  <span id=t_kwd>end</span>
<span id=t_kwd>end</span>

<span id=t_kwd>endmodule</span>
</pre>
</body>
</html>
